       
        puts "There are a total of #{total_timezones_count.count} different timezones around the world."
        puts "They are:"
        total_timezones_count.each.with_index(1) do |timezone, index|
            puts "#{index}. #{timezone}" unless timezone.empty?
        end

                puts "They are:"
        most_borders.last.borders.each.with_index(1) do |border, index|
            puts "#{index}. #{border}"
        end

                no_borders = self.all.select {|country| country.borders.empty?}
        puts "There are #{no_borders.count} countries that have no borders."

    def self.total_country_regions
        total_regions = self.all.select.uniq {|total_regions| total_regions.region} 
        total_regions_count = total_regions.select {|country| country.region unless country.region.empty?}
        puts "There are a total of #{total_regions_count.count} different regions around the world."
        puts "They are:"
        total_regions_sorted = total_regions_count.sort {|country1, country2| country1.region <=> country2.region}
        total_regions_sorted.each.with_index(1) do |country, index|
            puts "#{index}. #{country.region}" unless country.region.empty?
        end
        puts ""
    end

    most_populated = self.all.sort {|country1, country2| country1.population.to_i <=> country2.population.to_i}

        total_timezones = []
        self.all.each do |country|
            total_timezones << country.timezones if country.timezones.size == 1
        end

        self.all.each do |countries|
            if countries.timezones.size > 1
                    countries.each do |country|
                    total_timezones << country.timezones
                end 
            else
                break
            end
        end

        total_timezones_count = total_timezones.flatten.uniq.sort

        sum = 0
        self.all.each { |a| sum += a.population.to_i }
        puts sum

            def self.find_by_name(name)
        self.all.find {|country| country.name == name}
    end

gem 'launchy'
        # system("xdg-open #{flag}")
        # Launchy.open(flag)