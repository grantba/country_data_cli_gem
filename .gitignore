
require 'net/http'
require 'open-uri'
require 'json'

require 'launchy'
require 'watir'
gem 'watir', '~> 6.17'
gem 'webdrivers'
    def self.flag(index)
        #chromedriver_path = File.join(File.absolute_path('../..', File.dirname(__FILE__)),"browsers","chromedriver.exe")
        File.join(File.absolute_path('../..', File.dirname(__FILE__)),"browsers","chromedriver.exe")
        Selenium::WebDriver::Chrome::Service.driver_path = File.join(File.absolute_path('../..', File.dirname(__FILE__)),"browsers","chromedriver.exe")
        b = Watir::Browser.new :chrome, driver_path: chromedriver_path
        #b = Watir::Browser.new :chrome
        b.goto(self.all[index].flag)
        puts "Flag: "
        #b.goto(https://chromedriver.com/index.html)
        #b.link(text: self.all[index].flag).click
        b.close
        # puts "Flag: " 
        # <a href= "#{self.all[index].flag}" >
        # Click here to open the link!
        # <a>
    end

page = "https://freevectormaps.com/world-maps/WRLD-EPS-01-0015?ref=trends"
html = Nokogiri::HTML(open(page))
src  = html.at('div.flag img')['src']
File.open("foo.png", "wb") do |f|
f.write(open(src).read)
end

  def open_in_browser
    system("open '#{url}'")
  end

  #CountryDataCliGem::Country.all.find {|country| country.name.strip.downcase == selection}
        
        puts "There are a total of #{total_timezones_count.count} different timezones around the world."
        puts "They are:"
        total_timezones_count.each.with_index(1) do |timezone, index|
            puts "#{index}. #{timezone}" unless timezone.empty?
        end

                puts "They are:"
        most_borders.last.borders.each.with_index(1) do |border, index|
            puts "#{index}. #{border}"
        end

                no_borders = self.all.select {|country| country.borders.empty?}
        puts "There are #{no_borders.count} countries that have no borders."

    def self.total_country_regions
        total_regions = self.all.select.uniq {|total_regions| total_regions.region} 
        total_regions_count = total_regions.select {|country| country.region unless country.region.empty?}
        puts "There are a total of #{total_regions_count.count} different regions around the world."
        puts "They are:"
        total_regions_sorted = total_regions_count.sort {|country1, country2| country1.region <=> country2.region}
        total_regions_sorted.each.with_index(1) do |country, index|
            puts "#{index}. #{country.region}" unless country.region.empty?
        end
        puts ""
    end

